#include "disassm.h"
#include <stdexcept>
#include <memory>
#include <sstream>
#include <iostream>
#include <typeinfo>


using std::range_error;
//using std::runtime_error;
//using std::make_shared;
using std::stringstream;
using std::shared_ptr;

Disassm::Disassm(enum FLAVOUR flavour) :
m_flavour(flavour),
m_opcodes{
    shared_ptr<OpCode>(new OpCode0{"add", 0x00}),
    shared_ptr<OpCode>(new OpCode0{"add", 0x01}),
    shared_ptr<OpCode>(new OpCode0{"add", 0x02}),
    shared_ptr<OpCode>(new OpCode0{"add", 0x03}),
    shared_ptr<OpCode>(new OpCodeTwo{"add al", 0x04}),
    shared_ptr<OpCode>(new OpCodeThree{"add ax", 0x05}),
    shared_ptr<OpCode>(new OpCode{"push es", 0x06}),
    shared_ptr<OpCode>(new OpCode{"pop es", 0x07}),
    shared_ptr<OpCode>(new OpCode0{"or", 0x08}),
    shared_ptr<OpCode>(new OpCode0{"or", 0x09}),
    shared_ptr<OpCode>(new OpCode0{"or", 0x0a}),
    shared_ptr<OpCode>(new OpCode0{"or", 0x0b}),
    shared_ptr<OpCode>(new OpCodeTwo{"or al", 0x0c}),
    shared_ptr<OpCode>(new OpCodeThree{"or ax", 0x0d}),
    shared_ptr<OpCode>(new OpCode{"push cs", 0x0e}),
    shared_ptr<OpCode>(new OpCode{"pop cs", 0x0f}),

    shared_ptr<OpCode>(new OpCode0{"adc", 0x10}),
    shared_ptr<OpCode>(new OpCode0{"adc", 0x11}),
    shared_ptr<OpCode>(new OpCode0{"adc", 0x12}),
    shared_ptr<OpCode>(new OpCode0{"adc", 0x13}),
    shared_ptr<OpCode>(new OpCodeTwo{"adc al", 0x14}),
    shared_ptr<OpCode>(new OpCodeThree{"adc ax", 0x15}),
    shared_ptr<OpCode>(new OpCode{"push ss", 0x16}),
    shared_ptr<OpCode>(new OpCode{"pop ss", 0x17}),
    shared_ptr<OpCode>(new OpCode0{"sbb", 0x18}),
    shared_ptr<OpCode>(new OpCode0{"sbb", 0x19}),
    shared_ptr<OpCode>(new OpCode0{"sbb", 0x1a}),
    shared_ptr<OpCode>(new OpCode0{"sbb", 0x1b}),
    shared_ptr<OpCode>(new OpCodeTwo{"sbb al", 0x1c}),
    shared_ptr<OpCode>(new OpCodeThree{"sbb ax", 0x1d}),
    shared_ptr<OpCode>(new OpCode{"push ds", 0x1e}),
    shared_ptr<OpCode>(new OpCode{"pop ds", 0x1f}),

    /*0x20 - 0x3F*/
    shared_ptr<OpCode>(new OpCode0{"and", 0x20}),
    shared_ptr<OpCode>(new OpCode0{"and", 0x21}),
    shared_ptr<OpCode>(new OpCode0{"and", 0x22}),
    shared_ptr<OpCode>(new OpCode0{"and", 0x23}),
    shared_ptr<OpCode>(new OpCodeTwo{"and al", 0x24}),
    shared_ptr<OpCode>(new OpCodeThree{"and ax", 0x25}),
    shared_ptr<OpCode>(new OpCode{"es:", 0x26}),
    shared_ptr<OpCode>(new OpCode{"daa", 0x27}),
    shared_ptr<OpCode>(new OpCode0{"sub", 0x28}),
    shared_ptr<OpCode>(new OpCode0{"sub", 0x29}),
    shared_ptr<OpCode>(new OpCode0{"sub", 0x2a}),
    shared_ptr<OpCode>(new OpCode0{"sub", 0x2b}),
    shared_ptr<OpCode>(new OpCodeTwo{"sub al", 0x2c}),
    shared_ptr<OpCode>(new OpCodeThree{"sub ax", 0x2d}),
    shared_ptr<OpCode>(new OpCode{"cs:", 0x2e}),
    shared_ptr<OpCode>(new OpCode{"das", 0x2f}),

    shared_ptr<OpCode>(new OpCode0{"xor", 0x30}),
    shared_ptr<OpCode>(new OpCode0{"xor", 0x31}),
    shared_ptr<OpCode>(new OpCode0{"xor", 0x32}),
    shared_ptr<OpCode>(new OpCode0{"xor", 0x33}),
    shared_ptr<OpCode>(new OpCodeTwo{"xor al", 0x34}),
    shared_ptr<OpCode>(new OpCodeThree{"xor ax", 0x35}),
    shared_ptr<OpCode>(new OpCode{"ss:", 0x36}),
    shared_ptr<OpCode>(new OpCode{"aaa", 0x37}),
    shared_ptr<OpCode>(new OpCode0{"cmp", 0x38}),
    shared_ptr<OpCode>(new OpCode0{"cmp", 0x39}),
    shared_ptr<OpCode>(new OpCode0{"cmp", 0x3a}),
    shared_ptr<OpCode>(new OpCode0{"cmp", 0x3b}),
    shared_ptr<OpCode>(new OpCodeTwo{"cmp al", 0x3c}),
    shared_ptr<OpCode>(new OpCodeThree{"cmp ax", 0x3d}),
    shared_ptr<OpCode>(new OpCode{"push ds:", 0x3e}),
    shared_ptr<OpCode>(new OpCode{"pop aas", 0x3f}),

    /*0x40 - 0x5F*/
    shared_ptr<OpCode>(new OpCode{"inc ax", 0x40}),
    shared_ptr<OpCode>(new OpCode{"inc cx", 0x41}),
    shared_ptr<OpCode>(new OpCode{"inc dx", 0x42}),
    shared_ptr<OpCode>(new OpCode{"inc bx", 0x43}),
    shared_ptr<OpCode>(new OpCode{"inc sp", 0x44}),
    shared_ptr<OpCode>(new OpCode{"inc bp", 0x45}),
    shared_ptr<OpCode>(new OpCode{"inc si", 0x46}),
    shared_ptr<OpCode>(new OpCode{"inc di", 0x47}),
    shared_ptr<OpCode>(new OpCode{"dec ax", 0x48}),
    shared_ptr<OpCode>(new OpCode{"dec cx", 0x49}),
    shared_ptr<OpCode>(new OpCode{"dec dx", 0x4a}),
    shared_ptr<OpCode>(new OpCode{"dec bx", 0x4b}),
    shared_ptr<OpCode>(new OpCode{"dec sp", 0x4c}),
    shared_ptr<OpCode>(new OpCode{"dec bp", 0x4d}),
    shared_ptr<OpCode>(new OpCode{"dec si", 0x4e}),
    shared_ptr<OpCode>(new OpCode{"dec di", 0x4f}),

    shared_ptr<OpCode>(new OpCode{"push ax", 0x50}),
    shared_ptr<OpCode>(new OpCode{"push cx", 0x51}),
    shared_ptr<OpCode>(new OpCode{"push dx", 0x52}),
    shared_ptr<OpCode>(new OpCode{"push bx", 0x53}),
    shared_ptr<OpCode>(new OpCode{"push sp", 0x54}),
    shared_ptr<OpCode>(new OpCode{"push bp", 0x55}),
    shared_ptr<OpCode>(new OpCode{"push si", 0x56}),
    shared_ptr<OpCode>(new OpCode{"push di", 0x57}),
    shared_ptr<OpCode>(new OpCode{"pop ax", 0x58}),
    shared_ptr<OpCode>(new OpCode{"pop cx", 0x59}),
    shared_ptr<OpCode>(new OpCode{"pop dx", 0x5a}),
    shared_ptr<OpCode>(new OpCode{"pop bx", 0x5b}),
    shared_ptr<OpCode>(new OpCode{"pop sp", 0x5c}),
    shared_ptr<OpCode>(new OpCode{"pop bp", 0x5d}),
    shared_ptr<OpCode>(new OpCode{"pop si", 0x5e}),
    shared_ptr<OpCode>(new OpCode{"pop di", 0x5f}),

    /*0x60 - 0x7F*/
    shared_ptr<OpCode>(new OpCode{"--", 0x60}),
    shared_ptr<OpCode>(new OpCode{"--", 0x61}),
    shared_ptr<OpCode>(new OpCode{"--", 0x62}),
    shared_ptr<OpCode>(new OpCode{"--", 0x63}),
    shared_ptr<OpCode>(new OpCode{"--", 0x64}),
    shared_ptr<OpCode>(new OpCode{"--", 0x65}),
    shared_ptr<OpCode>(new OpCode{"--", 0x66}),
    shared_ptr<OpCode>(new OpCode{"--", 0x67}),
    shared_ptr<OpCode>(new OpCode{"--", 0x68}),
    shared_ptr<OpCode>(new OpCode{"--", 0x69}),
    shared_ptr<OpCode>(new OpCode{"--", 0x6a}),
    shared_ptr<OpCode>(new OpCode{"--", 0x6b}),
    shared_ptr<OpCode>(new OpCode{"--", 0x6c}),
    shared_ptr<OpCode>(new OpCode{"--", 0x6d}),
    shared_ptr<OpCode>(new OpCode{"--", 0x6e}),
    shared_ptr<OpCode>(new OpCode{"--", 0x6f}),

    shared_ptr<OpCode>(new OpCodeRelJump{"jo", 0x70}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jno", 0x71}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jb", 0x72}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jnb", 0x73}),
    shared_ptr<OpCode>(new OpCodeRelJump{"je", 0x74}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jne", 0x75}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jbe", 0x76}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jnbe", 0x77}),
    shared_ptr<OpCode>(new OpCodeRelJump{"js", 0x78}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jns", 0x79}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jp", 0x7a}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jnp", 0x7b}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jl", 0x7c}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jnl", 0x7d}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jle", 0x7e}),
    shared_ptr<OpCode>(new OpCodeRelJump{"jnle", 0x7f}),

    /*0x80 - 0x9F*/
    shared_ptr<OpCode>(new OpCode{"TODO", 0x80}),
    shared_ptr<OpCode>(new OpCode{"TODO", 0x81}),
    shared_ptr<OpCode>(new OpCode{"TODO", 0x82}),
    shared_ptr<OpCode>(new OpCode{"TODO", 0x83}),
    shared_ptr<OpCode>(new OpCode0{"test", 0x84}),
    shared_ptr<OpCode>(new OpCode1{"test", 0x85}),
    shared_ptr<OpCode>(new OpCode2{"xchg", 0x86}),
    shared_ptr<OpCode>(new OpCode3{"xchg", 0x87}),
    shared_ptr<OpCode>(new OpCode0{"mov", 0x88}),
    shared_ptr<OpCode>(new OpCode1{"mov", 0x89}),
    shared_ptr<OpCode>(new OpCode2{"mov", 0x8a}),
    shared_ptr<OpCode>(new OpCode3{"mov", 0x8b}),
    shared_ptr<OpCode>(new OpCode1{"_mov", 0x8c}),
    shared_ptr<OpCode>(new OpCode3{"lea", 0x8d}),
    shared_ptr<OpCode>(new OpCode3{"_mov", 0x8e}),
    shared_ptr<OpCode>(new OpCode3{"_pop", 0x8f}),

    shared_ptr<OpCode>(new OpCode{"nop", 0x90}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, cx", 0x91}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, dx", 0x92}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, bx", 0x93}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, sp", 0x94}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, bp", 0x95}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, si", 0x96}),
    shared_ptr<OpCode>(new OpCode{"xchg ax, di", 0x97}),
    shared_ptr<OpCode>(new OpCode{"cbw", 0x98}),
    shared_ptr<OpCode>(new OpCode{"cwd", 0x99}),
    shared_ptr<OpCode>(new OpCode{"TODO", 0x9a}),
    shared_ptr<OpCode>(new OpCode{"wait", 0x9b}),
    shared_ptr<OpCode>(new OpCode{"pushf", 0x9c}),
    shared_ptr<OpCode>(new OpCode{"popf", 0x9d}),
    shared_ptr<OpCode>(new OpCode{"sahf", 0x9e}),
    shared_ptr<OpCode>(new OpCode{"lahf", 0x9f}),

    /*0xA0 - 0xBF*/
    shared_ptr<OpCode>(new OpCodeThree{"mov al", 0xa0}),
    shared_ptr<OpCode>(new OpCodeThree{"mov ax", 0xa1}),
    shared_ptr<OpCode>(new OpCodeThree{"mov", 0xa2}),
    shared_ptr<OpCode>(new OpCodeThree{"mov", 0xa3}),
    shared_ptr<OpCode>(new OpCode{"movsb", 0xa4}),
    shared_ptr<OpCode>(new OpCode{"movsw", 0xa5}),
    shared_ptr<OpCode>(new OpCode{"cmpsb", 0xa6}),
    shared_ptr<OpCode>(new OpCode{"cmpsw", 0xa7}),
    shared_ptr<OpCode>(new OpCodeTwo{"test al", 0xa8}),
    shared_ptr<OpCode>(new OpCodeThree{"test ax", 0xa9}),
    shared_ptr<OpCode>(new OpCode{"stosb", 0xaa}),
    shared_ptr<OpCode>(new OpCode{"stosw", 0xab}),
    shared_ptr<OpCode>(new OpCode{"lodsb", 0xac}),
    shared_ptr<OpCode>(new OpCode{"lodsw", 0xad}),
    shared_ptr<OpCode>(new OpCode{"scasb", 0xae}),
    shared_ptr<OpCode>(new OpCode{"scasw", 0xaf}),

    shared_ptr<OpCode>(new OpCodeTwo{"mov al", 0xb0}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov cl", 0xb1}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov dl", 0xb2}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov bl", 0xb3}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov ah", 0xb4}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov ch", 0xb5}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov dh", 0xb6}),
    shared_ptr<OpCode>(new OpCodeTwo{"mov bh", 0xb7}),
    shared_ptr<OpCode>(new OpCodeThree{"mov ax", 0xb8}),
    shared_ptr<OpCode>(new OpCodeThree{"mov cx", 0xb9}),
    shared_ptr<OpCode>(new OpCodeThree{"mov dx", 0xba}),
    shared_ptr<OpCode>(new OpCodeThree{"mov bx", 0xbb}),
    shared_ptr<OpCode>(new OpCodeThree{"mov sp", 0xbc}),
    shared_ptr<OpCode>(new OpCodeThree{"mov bp", 0xbd}),
    shared_ptr<OpCode>(new OpCodeThree{"mov si", 0xbe}),
    shared_ptr<OpCode>(new OpCodeThree{"mov di", 0xbf}),

    /*0xC0 - 0xDF*/
    shared_ptr<OpCode>(new OpCode{"n/a", 0xc0}),
    shared_ptr<OpCode>(new OpCode{"n/a", 0xc1}),
    shared_ptr<OpCode>(new OpCodeThree{"ret d16", 0xc2}),
    shared_ptr<OpCode>(new OpCode{"ret", 0xc3}),
    shared_ptr<OpCode>(new OpCode{"les", 0xc4}),
    shared_ptr<OpCode>(new OpCode{"lds", 0xc5}),
    shared_ptr<OpCode>(new OpCode{"_mov", 0xc6}),
    shared_ptr<OpCode>(new OpCode{"_mov", 0xc7}),
    shared_ptr<OpCode>(new OpCode{"n/a", 0xc8}),
    shared_ptr<OpCode>(new OpCode{"n/a", 0xc9}),
    shared_ptr<OpCode>(new OpCodeThree{"retf d16", 0xca}),
    shared_ptr<OpCode>(new OpCode{"retf", 0xcb}),
    shared_ptr<OpCode>(new OpCode{"int 3", 0xcc}),
    shared_ptr<OpCode>(new OpCodeTwo{"int d8", 0xcd}),
    shared_ptr<OpCode>(new OpCode{"into", 0xce}),
    shared_ptr<OpCode>(new OpCode{"iret", 0xcf}),

    shared_ptr<OpCode>(new OpCodeTwo{"_rot", 0xd0}),
    shared_ptr<OpCode>(new OpCodeTwo{"_rot", 0xd1}),
    shared_ptr<OpCode>(new OpCodeTwo{"_rot", 0xd2}),
    shared_ptr<OpCode>(new OpCodeTwo{"_rot", 0xd3}),
    shared_ptr<OpCode>(new OpCodeTwo{"aam", 0xd4}),
    shared_ptr<OpCode>(new OpCodeTwo{"aad", 0xd5}),
    shared_ptr<OpCode>(new OpCode{"salc", 0xd6}),
    shared_ptr<OpCode>(new OpCode{"xlat", 0xd7}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 0", 0xd8}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 1", 0xd9}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 2", 0xda}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 3", 0xdb}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 4", 0xdc}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 5", 0xdd}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 6", 0xde}),
    shared_ptr<OpCode>(new OpCodeTwo{"esc 7", 0xdf}),

    /*0xE0 - 0xFF*/
    shared_ptr<OpCode>(new OpCodeTwo{"loopnz", 0xe0}),
    shared_ptr<OpCode>(new OpCodeTwo{"loopz", 0xe1}),
    shared_ptr<OpCode>(new OpCodeTwo{"loop", 0xe2}),
    shared_ptr<OpCode>(new OpCodeTwo{"jcxz", 0xe3}),
    shared_ptr<OpCode>(new OpCodeTwo{"in al", 0xe4}),
    shared_ptr<OpCode>(new OpCodeTwo{"in ax", 0xe5}),
    shared_ptr<OpCode>(new OpCodeTwo{"out", 0xe6}),
    shared_ptr<OpCode>(new OpCodeTwo{"out", 0xe7}),
    shared_ptr<OpCode>(new OpCodeThree{"call", 0xe8}),
    shared_ptr<OpCode>(new OpCodeThree{"jmp", 0xe9}),
    shared_ptr<OpCode>(new OpCodeThree{"jmp seg", 0xea}),
    shared_ptr<OpCode>(new OpCodeTwo{"jmp", 0xeb}),
    shared_ptr<OpCode>(new OpCode{"in al", 0xec}),
    shared_ptr<OpCode>(new OpCode{"in ax", 0xed}),
    shared_ptr<OpCode>(new OpCode{"out", 0xee}),
    shared_ptr<OpCode>(new OpCode{"out", 0xef}),

    shared_ptr<OpCode>(new OpCode{"lock", 0xf0}),
    shared_ptr<OpCode>(new OpCode{"n/a", 0xf1}),
    shared_ptr<OpCode>(new OpCode{"repne", 0xf2}),
    shared_ptr<OpCode>(new OpCode{"rep", 0xf3}),
    shared_ptr<OpCode>(new OpCode{"hlt", 0xf4}),
    shared_ptr<OpCode>(new OpCode{"cmc", 0xf5}),
    shared_ptr<OpCode>(new OpCodeTwo{"_alu2", 0xf6}),
    shared_ptr<OpCode>(new OpCodeTwo{"_alu2", 0xf7}),
    shared_ptr<OpCode>(new OpCode{"clc", 0xf8}),
    shared_ptr<OpCode>(new OpCode{"stc", 0xf9}),
    shared_ptr<OpCode>(new OpCode{"cli", 0xfa}),
    shared_ptr<OpCode>(new OpCode{"sti", 0xfb}),
    shared_ptr<OpCode>(new OpCode{"cld", 0xfc}),
    shared_ptr<OpCode>(new OpCode{"std", 0xfd}),
    shared_ptr<OpCode>(new OpCodeTwo{"_misc", 0xfe}),
    shared_ptr<OpCode>(new OpCodeTwo{"_misc", 0xff}),
  
}
{
}

pOpCode Disassm::decode(const bin_string& inp, size_t& offset) {
    const uint8_t &code = inp[0];
    return m_opcodes[code]->get(inp, offset);
}